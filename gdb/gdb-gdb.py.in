# Copyright (C) 2009-2021 Free Software Foundation, Inc.
#
# This file is part of GDB.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import gdb
import os.path


class TypeFlag:
    """A class that allows us to store a flag name, its short name,
    and its value.

    In the GDB sources, struct type has a component called instance_flags
    in which the value is the addition of various flags.  These flags are
    defined by the enumerates type_instance_flag_value.  This class helps us
    recreate a list with all these flags that is easy to manipulate and sort.
    Because all flag names start with TYPE_INSTANCE_FLAG_, a short_name
    attribute is provided that strips this prefix.

    ATTRIBUTES
      name:  The enumeration name (eg: "TYPE_INSTANCE_FLAG_CONST").
      value: The associated value.
      short_name: The enumeration name, with the suffix stripped.
    """

    def __init__(self, name, value):
        self.name = name
        self.value = value
        self.short_name = name.replace("TYPE_INSTANCE_FLAG_", '')

    def __lt__(self, other):
        """Sort by value order."""
        return self.value < other.value


# A list of all existing TYPE_INSTANCE_FLAGS_* enumerations,
# stored as TypeFlags objects.  Lazy-initialized.
TYPE_FLAGS = None


class TypeFlagsPrinter:
    """A class that prints a decoded form of an instance_flags value.

    This class uses a global named TYPE_FLAGS, which is a list of
    all defined TypeFlag values.  Using a global allows us to compute
    this list only once.

    This class relies on a couple of enumeration types being defined.
    If not, then printing of the instance_flag is going to be degraded,
    but it's not a fatal error.
    """

    def __init__(self, val):
        self.val = val

    def __str__(self):
        global TYPE_FLAGS
        if TYPE_FLAGS is None:
            self.init_TYPE_FLAGS()
        if not self.val:
            return "0"
        if TYPE_FLAGS:
            flag_list = [flag.short_name for flag in TYPE_FLAGS
                         if self.val & flag.value]
        else:
            flag_list = ["???"]
        return "0x%x [%s]" % (self.val, "|".join(flag_list))

    def init_TYPE_FLAGS(self):
        """Initialize the TYPE_FLAGS global as a list of TypeFlag objects.
        This operation requires the search of a couple of enumeration types.
        If not found, a warning is printed on stdout, and TYPE_FLAGS is
        set to the empty list.

        The resulting list is sorted by increasing value, to facilitate
        printing of the list of flags used in an instance_flags value.
        """
        global TYPE_FLAGS
        TYPE_FLAGS = []
        try:
            iflags = gdb.lookup_type("enum type_instance_flag_value")
        except:
            print("Warning: Cannot find enum type_instance_flag_value type.")
            print("         `struct type' pretty-printer will be degraded")
            return
        TYPE_FLAGS = [TypeFlag(field.name, field.enumval)
                      for field in iflags.fields()]
        TYPE_FLAGS.sort()


class StructTypePrettyPrinter:
    """Pretty-print an object of type struct type"""

    def __init__(self, val):
        self.val = val

    def children(self):
        for f in self.val.type.fields():
            name = f.name
            val = self.val[f]
            if name == "instance_flags":
                val = str(TypeFlagsPrinter(val))
            yield name, val


class StructMainTypePrettyPrinter:
    """Pretty-print an objet of type main_type"""

    def __init__(self, val):
        self.val = val

    def flags_to_string(self):
        """struct main_type contains a series of components that
        are one-bit ints whose name start with "flag_".  For instance:
        flag_unsigned, flag_stub, etc.  In essence, these components are
        really boolean flags, and this method prints a short synthetic
        version of the value of all these flags.  For instance, if
        flag_unsigned and flag_static are the only components set to 1,
        this function will return "unsigned|static".
        """
        fields = [field.name.replace("flag_", "")
                  for field in self.val.type.fields()
                  if field.name.startswith("flag_") and self.val[field.name]]
        return "|".join(fields)

    def bound_img(self, bound_name):
        """Return an image of the given main_type's bound."""
        b = self.val['flds_bnds']['bounds'].dereference()[bound_name]
        bnd_kind = str(b['kind'])
        if bnd_kind == 'PROP_CONST':
            return str(b['data']['const_val'])
        elif bnd_kind == 'PROP_UNDEFINED':
            return '(undefined)'
        else:
            info = [bnd_kind]
            if bound_name == 'high' and b['flag_upper_bound_is_count']:
                info.append('upper_bound_is_count')
            return '{} ({})'.format(str(b['data']['baton']), ','.join(info))

    def type_specific_img(self):
        """Return a string image of the main_type type_specific union.
        Only the relevant component of that union is printed (based on
        the value of the type_specific_kind field.
        """
        type_specific_kind = str(self.val['type_specific_field'])
        type_specific = self.val['type_specific']
        if type_specific_kind == "TYPE_SPECIFIC_NONE":
            return "type_specific_field", type_specific_kind
        elif type_specific_kind == "TYPE_SPECIFIC_CPLUS_STUFF":
            return "cplus_stuff", type_specific['cplus_stuff']
        elif type_specific_kind == "TYPE_SPECIFIC_GNAT_STUFF":
            return "gnat_stuff.descriptive_type", type_specific['gnat_stuff']['descriptive_type']
        elif type_specific_kind == "TYPE_SPECIFIC_FLOATFORMAT":
            return "floatformat[0..1]", type_specific['floatformat']
        elif type_specific_kind == "TYPE_SPECIFIC_FUNC":
            return "calling_convention", type_specific['func_stuff']['calling_convention']
            # tail_call_list is not printed.
        elif type_specific_kind == "TYPE_SPECIFIC_SELF_TYPE":
            return "self_type", type_specific['self_type']
        return "type_specific", "??? (unknown type_secific_kind: %s)" % type_specific_kind

    def children(self):
        yield "name", self.val['name'].format_string(symbols=False, address=False)
        yield "code", self.val['code']
        yield "flags", "[%s]" % self.flags_to_string()
        if self.val['flag_objfile_owned'] != 0:
            yield "owner.objfile", self.val['owner']['objfile']
        else:
            yield "owner.gdbarch", self.val['owner']['gdbarch']
        yield "target_type", self.val['target_type']
        if self.val['nfields'] > 0:
            fields = self.val['flds_bnds']['fields']
            field_array_type = fields.type.target().array(self.val['nfields'] - 1).pointer()
            yield "flds_bnds.fields", fields.cast(field_array_type).dereference()
        if self.val['code'] == gdb.TYPE_CODE_RANGE:
            b = self.val['flds_bnds']['bounds'].dereference()
            low = self.bound_img('low')
            high = self.bound_img('high')

            img = "{%s, %s}" % (low, high)
            if b['flag_bound_evaluated']:
                img += ' [evaluated]'
            yield "flds_bnds.bounds", img
        yield self.type_specific_img()


class StructFieldPrettyPrinter:
    """Pretty-print an objet of type field"""

    def __init__(self, val):
        self.val = val

    def children(self):
        if self.val['artificial']:
            yield "artificial", self.val['artificial']
        yield "name", self.val['name'].format_string(symbols=False, address=False)
        yield "type", self.val['m_type']
        yield "loc_kind", self.val['loc_kind']
        yield "bitsize", self.val['bitsize']

        loc_val = self.val['loc']
        loc_kind = str(self.val['loc_kind'])
        if loc_kind == "FIELD_LOC_KIND_BITPOS":
            yield "bitpos", loc_val['bitpos']
        elif loc_kind == "FIELD_LOC_KIND_ENUMVAL":
            yield "enumval", loc_val['enumval']
        elif loc_kind == "FIELD_LOC_KIND_PHYSADDR":
            yield "physaddr", loc_val['physaddr']
        elif loc_kind == "FIELD_LOC_KIND_PHYSNAME":
            yield "physname", loc_val['physname'].format_string(symbols=False, address=False)
        elif loc_kind == "FIELD_LOC_KIND_DWARF_BLOCK":
            yield "dwarf_block", loc_val['dwarf_block']
        else:
            yield "loc", "???"


class CoreAddrPrettyPrinter:
    """Print CORE_ADDR values as hex."""

    def __init__(self, val):
        self._val = val

    def to_string(self):
        return hex(int(self._val))


def type_lookup_function(val):
    """A routine that returns the correct pretty printer for VAL
    if appropriate.  Returns None otherwise.
    """
    if val.type.tag == "type":
        return StructTypePrettyPrinter(val)
    elif val.type.tag == "main_type":
        return StructMainTypePrettyPrinter(val)
    elif val.type.tag == "field":
        return StructFieldPrettyPrinter(val)
    elif val.type.name == 'CORE_ADDR':
        return CoreAddrPrettyPrinter(val)
    return None


def register_pretty_printer(objfile):
    """A routine to register a pretty-printer against the given OBJFILE.
    """
    objfile.pretty_printers.append(type_lookup_function)


if __name__ == "__main__":
    if gdb.current_objfile() is not None:
        # This is the case where this script is being "auto-loaded"
        # for a given objfile.  Register the pretty-printer for that
        # objfile.
        register_pretty_printer(gdb.current_objfile())
    else:
        # We need to locate the objfile corresponding to the GDB
        # executable, and register the pretty-printer for that objfile.
        # FIXME: The condition used to match the objfile is too simplistic
        # and will not work on Windows.
        for objfile in gdb.objfiles():
            if os.path.basename(objfile.filename) == "gdb":
                objfile.pretty_printers.append(type_lookup_function)
